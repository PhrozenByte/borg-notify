#!/usr/bin/env python
import borg_notify
import argparse, logging, os, shlex, sys
from gi.repository import GObject

class UsageError(ValueError):
    """Inappropiate argument passed to borg-notify."""

try:
    argumentParser = argparse.ArgumentParser(usage="%(prog)s [OPTION]... COMMAND...", add_help=False,
        description="Send a desktop notification every CRON_EXPRESSION to inform the user that a backup is " +
            "on schedule. If the user decides to start the backup, execute COMMAND.")

    applicationOptions = argumentParser.add_argument_group("Application options")
    applicationOptions.add_argument("commands", nargs="*", metavar="COMMAND",
        help="command to execute when creating a backup")
    applicationOptions.add_argument("-f", "--force", dest="force", action="store_true",
        help="force a immediate backup and exit")
    applicationOptions.add_argument("-r", "--reset", dest="reset", action="store_true",
        help="reset the last execution time of this backup command and exit")
    applicationOptions.add_argument("-i", "--info", dest="name",
        help="optional name for this backup")
    applicationOptions.add_argument("-c", "--cron", dest="cronExpression", metavar="CRON_EXPRESSION",
        help="crontab-like schedule definition (defaults to every day at 8:00, i.e. \"0 8 * * *\")")
    applicationOptions.add_argument("-s", "--sleep", dest="sleepTime", type=int, metavar="SECONDS",
        help="time to sleep when the user dismisses the notification (in seconds, defaults to 1 hour, i.e. 3600)")
    applicationOptions.add_argument("-v", "--verbose", dest="verbosity", action="count", default=0,
        help="explain what is being done")

    helpOptions = argumentParser.add_argument_group("Help options")
    helpOptions.add_argument("--help", dest="help", action="store_true",
        help="display this help and exit")
    helpOptions.add_argument("--version", dest="version", action="store_true",
        help="output version information and exit")

    args = argumentParser.parse_args()

    if args.help:
        argumentParser.print_help()
        sys.exit(0)

    if args.version:
        print("borg-notify {}".format(borg_notify.__version__))
        print("Copyright (C) 2016 Daniel Rudolf")
        print("")
        print("License GPLv3: GNU GPL version 3 only <http://gnu.org/licenses/gpl.html>.")
        print("This is free software: you are free to change and redistribute it.")
        print("There is NO WARRANTY, to the extent permitted by law.")
        print("")
        print("Written by Daniel Rudolf <http://www.daniel-rudolf.de/>")
        sys.exit(0)

    try:
        commands = []
        for command in args.commands:
            commands.append(shlex.split(command))

        borgNotify = borg_notify.BorgNotify(commands)
    except ValueError:
        argumentParser.print_usage()
        sys.exit(1)

    try:
        if args.name is not None:
            try:
                borgNotify.name = args.name
            except ValueError:
                raise UsageError("Invalid name given")
        if args.cronExpression is not None:
            try:
                borgNotify.cronExpression = args.cronExpression
            except ValueError:
                raise UsageError("Invalid cron expression given")
        if args.sleepTime is not None:
            try:
                borgNotify.sleepTime = args.sleepTime
            except ValueError:
                raise UsageError("Invalid sleep time given")
    except UsageError as error:
        message = str(error)
        message = message[0].lower() + message[1:]
        sys.stderr.write("{}: {}\n".format(os.path.basename(sys.argv[0]), message))
        sys.exit(1)

    borgNotify.logger.setLevel(max(logging.DEBUG, logging.WARNING - args.verbosity * 10))

    if args.force:
        borgNotify.updateLastExecution()
        success = borgNotify.backup()
        sys.exit(0 if success else 1)

    if args.reset:
        borgNotify.resetCache()
        sys.exit(0)

    borgNotify.main()
    GObject.MainLoop().run()
    sys.exit(0)
except KeyboardInterrupt:
    sys.exit(0)
