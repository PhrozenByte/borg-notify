#!/usr/bin/env python
import borg_notify
import logging, os, shlex, sys
from gi.repository import GObject
from xdg import BaseDirectory

try:
    import ConfigParser as configparser
except ImportError:
    import configparser

class ConfigError(ValueError):
    """Invalid config option in borg-notify.ini."""

try:
    configFiles = []
    configPaths = BaseDirectory.load_config_paths("borg-notify")
    for configPath in configPaths:
        configFiles.append(configPath + "/borg-notify.ini")

    configParser = configparser.RawConfigParser(allow_no_value=True)
    configParser.read(configFiles)

    notifications = []
    for section in configParser.sections():
        try:
            if not configParser.has_option(section, "command"):
                raise ConfigError("No command given")

            try:
                command = shlex.split(configParser.get(section, "command"))
                borgNotify = borg_notify.BorgNotify([ command ])
            except ValueError:
                raise ConfigError("Invalid command")

            try:
                borgNotify.id = section
            except ValueError:
                raise ConfigError("Invalid section name")

            fileLogPath = BaseDirectory.save_cache_path("borg-notify") + "/" + borgNotify.id + ".log"
            fileLogHandler = logging.FileHandler(fileLogPath)
            fileLogHandler.setFormatter(logging.Formatter("%(asctime)s: %(levelname)s: %(message)s", "%Y-%m-%d %H:%M:%S"))

            borgNotify.logger.handlers = []
            borgNotify.logger.setLevel(logging.INFO)
            borgNotify.logger.addHandler(fileLogHandler)

            fileLogStream = fileLogHandler.stream
            borgNotify.backupStreams = { "stdout": fileLogStream, "stderr": fileLogStream }

            if configParser.has_option(section, "debug"):
                try:
                    if configParser.getboolean(section, "debug"):
                        borgNotify.logger.setLevel(logging.DEBUG)
                except ValueError:
                    raise ConfigError("Invalid debug boolean")
            if configParser.has_option(section, "name"):
                try:
                    borgNotify.name = configParser.get(section, "name")
                except ValueError:
                    raise ConfigError("Invalid name")
            if configParser.has_option(section, "cron"):
                try:
                    borgNotify.cronExpression = configParser.get(section, "cron")
                except ValueError:
                    raise ConfigError("Invalid cron expression")
            if configParser.has_option(section, "sleep"):
                try:
                    borgNotify.sleepTime = configParser.get(section, "sleep")
                except ValueError:
                    raise ConfigError("Invalid sleep time")
        except ConfigError as error:
            message = str(error)

            if borgNotify.logger:
                borgNotify.logger.error(message)

            message = message[0].lower() + message[1:]
            sys.stderr.write('{}: section "{}": {}'.format(os.path.basename(sys.argv[0]), section, message))
        else:
            borgNotify.main()
            notifications.append(borgNotify)

    if len(notifications) == 0:
        sys.stderr.write(os.path.basename(sys.argv[0]) + ": no applicable configuration found; aborting...\n")
        sys.exit(1)

    GObject.MainLoop().run()
    sys.exit(0)
except Exception as error:
    if borgNotify.logger:
        borgNotify.logger.error(str(error))

    raise
except KeyboardInterrupt:
    sys.exit(0)
